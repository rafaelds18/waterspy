%%________________________________________________________________________
\chapter{Implementação do Modelo}
\label{ch:implementacaoDoModelo}
%%________________________________________________________________________

Neste capitulo apresenta-se a implementação do modelo proposto. A arquitetura tecnológica utilizada para o desenvolvimento do sistema apresenta-se na \autoref{sec:arquiteturaTecnologica}.

\section{Arquitetura Tecnológica}
\label{sec:arquiteturaTecnologica}
A \autoref{fig:arquiteturaTecno} apresenta a arquitetura que foi adotada para implementar o sistema informático \texttt{WaterSpy}.
\begin{figure}[!ht]
	\centering
	\includegraphics[width=10cm]{Imagens/Arquitetura/arquitetura_tecno.pdf}
	\caption{Arquitetura utilizada}
	\label{fig:arquiteturaTecno}
\end{figure}

Esta arquitetura é composta por uma \texttt{Interface Com o Utilizador} e pelo \texttt{Servidor}. 

A \texttt{Interface Com o Utilizador} é a interface gráfica para o utilizador, de modo a facilitar a realização das operações que o sistema oferece, esta interface tem o apoio da tecnologia \textit{Progressive Web App} (\texttt{PWA}) que ajuda a mostrar a interface nos mais variados dispositivos, sem que haja desenvolvimento de mais código para mostrar a mesma interface. 

O \texttt{Servidor} é onde está desenvolvido toda a parte lógica do sistema e é onde se efetua as comunicações com os serviços externos como o \texttt{Sistema de Gestão de Base de Dados} e o \texttt{Sistema de Gestão de Consumos}.

O \texttt{Sistema de Gestão de Base de Dados} é um sistema onde os gestores do sistema tem a possibilidade de manutenção do mesmo e manipulação dos dados. A tecnologia no \texttt{Sistema de Gestão de Base de Dados} usada para a manipulação de dados é o \texttt{Microsoft SQL Server} \cite{Microsoft_SQL_Server}, para o um editor gráfico do \texttt{Sistema de Gestão de Base de Dados} é usado o editor \textit{Azure Data Studio} \cite{Azure_Data_Studio} e para o executar os \textit{scripts} feitos no editor é usado o \textit{Docker} \cite{Docker} que contém uma imagem \textit{Microsoft SQL Server} que interpreta os \textit{scripts}.

O \texttt{Sistema de Gestão de Consumos} é um sistema que recebe os valores dos consumo enviados, e onde é possível enviar \textit{e-mails} para os utilizadores do sistema. Este sistema para questões de teste encontra-se dentro do \textit{Back-end} usa as seguinte tecnologia \texttt{NodeJS + Express} \cite{NodeJS_Express} para parte da lógica e comunicação com o \texttt{Servidor}, para o envio de \textit{e-mails} é usado uma biblioteca do \texttt{NodeJS + Express} o \textit{Nodemailer}. Apesar de \texttt{Sistema de Gestão de Consumos} utilizar tecnologias usadas para simular/teste é possível usar outras tecnologias desde que os cumpra o número de parâmetros de entradas dos métodos e os seus tipos de dados.
 
A \texttt{Interface Com o Utilizador} é designado o \textit{Front-end} e o \texttt{Servidor} de \textit{Back-end} de uma aplicação tecnológica. 
O \textit{Front-end} é onde está desenvolvido toda a estrutura que suporta interface gráfica e que comunica com o \textit{Back-end} para realizar certas operações e receber os dados das mesmas. Para o desenvolvimento das componentes gráficas é usado a linguagem \texttt{Angular 12} \cite{Angular_12} e a biblioteca \texttt{Bootstrap 5} \cite{Bootstrap_5}.
O \textit{Back-end} é onde esta desenvolvido toda a estrutura que suporta toda a parte lógica do sistema, para tal é usado as seguintes tecnologias: o \texttt{NodeJS + Express} para o desenvolvimento da parte lógica, para o \textit{Optical Character Recognition} (\texttt{OCR}) e para  comunicação com o \textit{Front-end} e o \texttt{Sistema de Gestão de Consumos}, para a comunicação com o \texttt{Sistema de Gestão de Base de Dados} é usado o \texttt{Sequelize} \cite{Sequelize} uma biblioteca do \texttt{NodeJS + Express}.

No ato de uma autenticação no sistema na comunicação entre o \textit{Front-end} e o \textit{Back-end} para encriptação da autenticação é usado a tecnologia \textit{JWT} \cite{JWT} que funciona por \textit{accessToken}.


\section{Preparação das Imagens para tratamento por \textit{OCR}}
\label{sec:imagens_ocr}

A \autoref{fig:leitura_ocr} apresenta a imagem original que é capturada e a imagem processada que é utilizada para a interpretação de caracteres do sistema.

O servidor recebe a \autoref{subFig:leitura_original} que foi a captura feita pelo utilizador do sistema,  imagem esta que tem de ser processada de modo a que o reconhecimento dos caracteres seja feito com maior precisão.
Com o uso da biblioteca \textit{JIMP} \cite{JIMP} são feitos processamentos à imagem original como colocar em escala de cinzentos, até se obter algo semelhante à \autoref{subFig:leitura_tratada}. 
O \texttt{OCR} é feito sobre a \autoref{subFig:leitura_tratada} usando uma biblioteca \textit{node-tesseract-ocr} \cite{node-tesseract-ocr} fornecida pelo \textit{NodeJS + Express}.

\begin{figure}[!ht]
    \centering
    \subfloat[\centering Imagem original
    \label{subFig:leitura_original}]
    {{\includegraphics[width=5cm]{Imagens/OCR/leitura-original.pdf} }}
    \qquad
    \subfloat[\centering Imagem usada para o \textit{OCR}
     \label{subFig:leitura_tratada}]
    {{\includegraphics[width=5cm]{Imagens/OCR/leitura-tratada.pdf} }}    
    \caption{Imagens antes e depois da leitura do \textit{OCR}}
    \label{fig:leitura_ocr}
\end{figure}